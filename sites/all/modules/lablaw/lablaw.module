<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'lablaw') . '/lablaw.admin.inc';
function lablaw_init()
{
    global $base_url;
    drupal_add_js($base_url . '/' . libraries_get_path('maskedinput') . '/jquery.maskedinput-1.3.js');
    if (!drupal_session_started()) {
        drupal_session_start();
    }
}

function lablaw_menu()
{
    $items = array();
    $items['contact/%'] = array(
        'title' => 'Contact',
        'page callback' => 'lablaw_contact',
        'access callback' => TRUE,
        'page arguments' => array(1),
        'type' => MENU_CALLBACK,
    );
    $items['admin/config/system/intake'] = array(
        'title' => 'Intake Configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lablaw_admin_form'),
        'access arguments' => array('administer triage page'),
    );
    $items['lablaw_filterval/%/%'] = array(
        'title' => 'Filter Info',
        'page callback' => 'lablaw_filterval',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['lablaw_validcity/%/%/%'] = array(
        'title' => 'Filter Info',
        'page callback' => 'lablaw_validcity',
        'page arguments' => array(1, 2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

//function lablaw_custom_theme() {
//  $tid = arg(1);
//  $term = taxonomy_term_load($tid);
//  //dsm($term);
//  if (isset($term->og_group_ref) && $term->og_group_ref){
//    return 'lablaw_groups';
//  }
//}
function lablaw_contact($nid = NULL)
{
    global $base_url;
    if (is_null($nid) || $nid < 1) {
        drupal_goto($base_url);
        return;
    } else {
        $node = node_load($nid);
        $send_to = $node->field_first_name['und'][0]['value'] . " " . $node->field_last_name['und'][0]['value'];
        drupal_set_title('Contact ' . $send_to);
        //dsm($node);
        if ($node) {
            $output = 'You can send ' . $send_to . ' a message using the contact form below';
        } else {
            $output = '';
        }
        $form = drupal_get_form('lablaw_contact_form', $nid);
        $output .= drupal_render($form);
        return $output;
    }
}

function lablaw_contact_form($form, &$form_state, $nid)
{
    $form['lablaw_nid'] = array(
        '#type' => 'hidden',
        '#value' => $nid,
    );
    $form['lablaw_name'] = array(
        '#type' => 'textfield',
        '#size' => 30,
        '#title' => t('Your Name'),
        '#attributes' => array(
            'placeholder' => t('Enter your name'),
        ),
        '#prefix' => '<div class="two-part">',
        '#suffix' => '</div>',
    );
    $form['lablaw_email'] = array(
        '#type' => 'textfield',
        '#size' => 30,
        '#title' => t('Your Email'),
        '#attributes' => array(
            'placeholder' => t('Enter email'),
        ),
        '#prefix' => '<div class="two-part">',
        '#suffix' => '</div>',
    );
    $form['lablaw_subject'] = array(
        '#type' => 'textfield',
        '#size' => 50,
        '#title' => t('Subject'),
        '#attributes' => array(
            'placeholder' => t('Enter subject here'),
        ),
    );
    $form['lablaw_text'] = array(
        '#type' => 'textarea',
        '#size' => 50,
        //    '#title' => t('Give a brief description of your legal problem'),
        '#title' => t('Your comments or question'),
        '#attributes' => array(
            'placeholder' => t('Enter your comments'),
        ),
    );
    $form['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Clear'),
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#id' => 'lablaw_contact_submit',
        '#weight' => 7,
        '#value' => t('Send Message'),
    );
    return $form;
}

function lablaw_contact_form_submit($form, &$form_state)
{
    $op = $form_state['values']['op'];
    switch ($op) {
        case t('Send Message'):
            global $base_url;
            $nid = $form_state['values']['lablaw_nid'];
            $node = node_load($nid);
            $send_to = $node->field_first_name['und'][0]['value'] . " " . $node->field_last_name['und'][0]['value'];
            $email = db_query('select field_email_email from field_data_field_email where entity_id = :nid', array(":nid" => $nid))->fetchColumn();
            if ($email) {
                $mymail = $form_state['values']['lablaw_email'];
                $myname = $form_state['values']['lablaw_name'];
                $subject = $form_state['values']['lablaw_subject'];
                $text = "<br />";
                $text .= "From: " . $myname . "<br />";
                $text .= "Email: " . $mymail . "<br />";
                $text .= "Message: <p style='padding: 5px 50px;max-width: 500px'>" . $form_state['values']['lablaw_text'] . "</p>";
                $msg = "Email to " . $send_to . " failed";
                $success = lablaw_mail('default_from', $email, 'Contact Form from LabLaw: ' . $subject, $text);
                if ($success) {
                    $msg = "Email to " . $send_to . " was successfully sent.";
                } else {
                    $msg = "Email to " . $send_to . " was not sent.";
                }
                watchdog('lablaw_email', $msg);
            }
            drupal_set_message($msg);
            $form_state['redirect'] = $base_url . "/our-team";
            break;
        case t('Clear'):
            //dsm($form_state);
            break;
    }

    //dsm($form_state);
}

function lablaw_mail($from = 'default_from', $to, $subject, $message)
{
    $lablaw = 'lablaw';
    $my_mail_token = microtime();
    if ($from == 'default_from') {
        // Change this to your own default 'from' email address.
        $from = variable_get('site_mail', 'brian@bdsworks.org');
    }
    $message = array(
        'id' => $lablaw . '_' . $my_mail_token,
        'to' => $to,
        'subject' => $subject,
        'body' => array($message),
        'headers' => array(
            'From' => $from,
            'Sender' => $from,
            'Return-Path' => $from,
        ),
    );
    $system = drupal_mail_system($lablaw, $my_mail_token);
    $message = $system->format($message);
    if ($system->mail($message)) {
        return TRUE;
    } else {
        return FALSE;
    }
}

function lablaw_responsive_menus_styles_alter(&$styles)
{
    $fil = drupal_get_path('module', 'lablaw') . "/lablaw.js";
    //dsm($fil);
    $styles['responsive_menus_simple']['js_files'][] = $fil;
}

/**
 * Implementation of hook_webform_results_access().
 */
function lablaw_webform_results_access($node, $account = NULL)
{
    return lablaw_webform_access($node, $account);
}

/**
 * Implementation of hook_webform_submission_access().
 */
function lablaw_webform_submission_access($node, $submission, $op = 'view', $account = NULL)
{
    return lablaw_webform_access($node, $account);
}

/**
 * Returns true if account is a value in the webform results user
 * reference field on the webform content type.
 *
 * @param object $node
 *   The webform node.
 * @param object $account
 *   The user account, optional. Defaults to current user.
 *
 * @return bool
 *   Returns true if user is listed, false otherwise.
 */
function lablaw_webform_access($node, $account = NULL)
{
    global $user;
    $account = isset($account) ? $account : $user;
    $access = FALSE;
    if (isset($node->field_webform_results_access['und'][0]['uid'])) {
        // This webform has user(s) specified for submission results access control.
        if (user_access("administer nodes") || user_access("edit any webform content")) {
            $access = TRUE;
        } else {
            // For each user specified, make sure the current user is one of them,
            // otherwise don't show the results.
            foreach ($node->field_webform_results_access['und'] as $i => $user_reference) {
                if ($user_reference['uid'] == $account->uid) {
                    $access = TRUE;
                    break;
                }
            }
        }
    }
    return $access;
}


/**
 * Implements hook_form_alter().
 */
function lablaw_form_alter(&$form, &$form_state, $form_id)
{
    if (isset($form['#node']) && isset($form['#node']->nid)) {
        if (isset($_SESSION['mi_intake'])) {
            unset($_SESSION['mi_intake']);
        }
        $formid = $form['#node']->nid;
        $ids = variable_get('lablaw_webform_ids', "");
        $id_ray = explode(",", $ids);
        $is_intake = FALSE;
        foreach ($id_ray as $id) {
            if ($id == $formid) {
                $is_intake = TRUE;
                break;
            }
        }
        if ($is_intake) {
            $form['#limit_validation_errors'] = array();
            drupal_add_js(array('intake_ids' => $id_ray), 'setting');
            $form['#validate'][] = 'lablaw_validate_custom';
        }
    }
}

function lablaw_webform_submission_presave($node, &$submission)
{
    $nid = $submission->nid;
    $ids = variable_get('lablaw_webform_ids', "");
    $id_ray = explode(",", $ids);
    $is_intake = FALSE;
    foreach ($id_ray as $id) {
        if ($id == $nid) {
            $is_intake = TRUE;
            break;
        }
    }
    if ($is_intake) {
        $nid = intval($nid);
        $city_zip = lablaw_getfield($nid, $submission, 'city___zip');
        $phoneinfo = lablaw_getfield($nid, $submission, 'CPHONEFULL');
        $area = substr($phoneinfo, 0, 5);
        $tel = str_replace($area, "", $phoneinfo);
        $tel = trim(str_replace("-", "", $tel));
        $area = str_replace("(", "", $area);
        $area = trim(str_replace(")", "", $area));
        $pos = strpos($city_zip, "~");
        $zip = trim(substr($city_zip, 0, $pos - 1));
        $city = trim(substr($city_zip, $pos + 1));
        $fld = "CACODE";
        lablaw_setfield($nid, $submission, $fld, $area);
        $fld = "CPHONE";
        lablaw_setfield($nid, $submission, $fld, $tel);
        $fld = "CZIP";
        lablaw_setfield($nid, $submission, $fld, $zip);
        $fld = "CCITY";
        lablaw_setfield($nid, $submission, $fld, $city);
    }
}

function lablaw_getfield($nid = NULL, &$submission, $fld = NULL)
{
    $val = "";
    if (is_null($nid) || is_null(fld)) {
        return '';
    }
    $query = db_select('webform_component', 'c');
    $query->addField('c', 'cid');
    $query->condition('c.nid', $nid)
        ->condition('c.form_key', $fld);
    $cid = $query->execute()->fetchColumn();
    if ($cid) {
        if (isset($submission->data[$cid]) && isset($submission->data[$cid][0])) {
            $val = $submission->data[$cid][0];
        }
    }
    return $val;
}

function lablaw_setfield($nid = NULL, &$submission, $fld = NULL, $val = NULL)
{
    if (is_null($nid) || is_null($fld) || is_null($val)) {
        return;
    }
    $query = db_select('webform_component', 'c');
    $query->addField('c', 'cid');
    $query->condition('c.nid', $nid)
        ->condition('c.form_key', $fld);
    $cid = $query->execute()->fetchColumn();
    if ($cid) {
        if (isset($submission->data[$cid]) && isset($submission->data[$cid][0])) {
            $submission->data[$cid][0] = $val;
        }
    }
}

function lablaw_validate_custom($form, &$form_state)
{
}

function lablaw_token_info()
{
    $info = array();

    $info['types']['session'] = array(
        'name' => t('Session vars'),
        'description' => t('Tokens from _SESSION.'),
    );

    $info['tokens']['session']['triage-dv'] = array(
        'name' => t('Triage DV'),
        'description' => t("Triage DV"),
    );
    $info['tokens']['session']['triage-county'] = array(
        'name' => t('Triage County'),
        'description' => t("Triage County"),
    );
    $info['tokens']['session']['triage-pov'] = array(
        'name' => t('Triage POV'),
        'description' => t("Triage POV"),
    );
    $info['tokens']['session']['triage-who-is'] = array(
        'name' => t('Triage Actor'),
        'description' => t("Triage Actor - Self (0) or Other (1)"),
    );
    $info['tokens']['session']['triage-status'] = array(
        'name' => t('Triage Status'),
        'description' => t("Triage Status - array"),
    );
    $info['tokens']['session']['triage-factors'] = array(
        'name' => t('Triage Factors'),
        'description' => t("Triage Factors - array"),
    );
    $info['tokens']['session']['triage-problem-code'] = array(
        'name' => t('Triage Problem Code'),
        'description' => t("Triage Problem Code"),
    );

    return $info;
}

function lablaw_node_load($nodes, $types)
{
    //  dsm(arg(0));
    //  dsm(arg(1));
    if (in_array("webform", $types)) {
        if (variable_get('lablaw_bypass_validation', FALSE) && user_has_role(3)) {
            foreach ($nodes as $node) {
                foreach ($node->webform['components'] as $key => $value) {
                    $node->webform['components'][$key]['required'] = "0";
                }
            }
        }
    }
}

/**
 * Implements hook_tokens().
 *
 * @ingroup mytoken_custom
 */
function lablaw_tokens($type, $tokens, array $data = array(), array $options = array())
{
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    $tid = -1;
    if (isset($_SESSION['triage']) && isset($_SESSION['triage']['my_tid'])) {
        $tid = $_SESSION['triage']['my_tid'];
    }
    $prob_code = 0;

    // Text format tokens.
    if ($type == 'session') {

        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'triage-dv':
                    $replacements[$original] = in_array(965, $_SESSION['triage']['triage_status']);
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-pov':
                    $replacements[$original] = triage_percent_pov();
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-county':
                    $replacements[$original] = $_SESSION['triage']['my_county'];
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-who-is':
                    $replacements[$original] = $_SESSION['triage']['triage_who_is'];
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-status':
                    $replacements[$original] = triage_tax_list($_SESSION['triage']['triage_status'], ", ");
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-factors':
                    $replacements[$original] = triage_tax_list($_SESSION['triage']['factors'], ", ");
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
                case 'triage-problem-code':
                    $replacements[$original] = $prob_code;
                    if ($sanitize) {
                        $replacements[$original] = filter_xss($replacements[$original]);
                    }
                    break;
            }
        }
    }

    return $replacements;
}

function lablaw_filterval($val = NULL, $id = 'test')
{
    $_SESSION['lablaw'][$id] = $val;
}

function lablaw_validcity($state = NULL, $zip = null, $city = null)
{
    if ($zip == "00000") {
        return true;
    }
    $ret = false;
    $query = db_select('citydata', 'c');
    $query->addField('c', 'zipcode');
    $query->condition('c.stateid', $state);
    $query->condition('c.namecity', $city);
    $query->condition('c.zipcode', $zip);
    $found = $query->execute();
    if ($found) {
        $ret = true;
    }
    return $ret;
}

function lablaw_city_zip($str = "", $depends = NULL)
{
    $str = trim(preg_replace("/[^0-9a-zA-Z ]/", "", $str));
    $items = array();
    if ($str == "00000"){
        $items['00000 ~ Unknown'] = '00000 - Unknown';
        return $items;
    }
    $query = db_select('citydata', 'c');
    if (preg_match("/^[0-9]+$/", substr($str, 0, 1))) {
        $query->fields('c', array('cityid', 'zipcode', 'namecity'))
            ->condition('c.zipcode', db_like($str) . '%', 'LIKE')
            ->range(0, 20)
            ->orderBy('c.zipcode');
        if (isset($_SESSION['lablaw'][$depends])) {
            $thisfilt = $_SESSION['lablaw'][$depends];
            $query->condition('c.stateid', $thisfilt);
        }
        $return = $query->execute();
        foreach ($return as $obj) {
            $key = $obj->zipcode . " ~ " . $obj->namecity;
            $items[$key] = check_plain($obj->zipcode . " - " . $obj->namecity);
        }
    } else {
        $query->fields('c', array('cityid', 'zipcode', 'namecity'))
            ->condition('c.namecity', db_like($str) . '%', 'LIKE')
            ->range(0, 10)
            ->orderBy('c.namecity');
        if (isset($_SESSION['lablaw'][$depends])) {
            $thisfilt = $_SESSION['lablaw'][$depends];
            $query->condition('c.stateid', $thisfilt);
        }
        $return = $query->execute();
        foreach ($return as $obj) {
            $key = $obj->zipcode . " ~ " . $obj->namecity;
            $items[$key] = check_plain($obj->namecity . " ~ " . $obj->zipcode);
        }
    }
    // return for JS
    return $items;

}

function lablaw_city($str = "", $depends = NULL)
{
    $items = array();
    $query = db_select('citydata', 'c');
    $query->fields('c', array('cityid', 'zipcode', 'namecity'))
        ->distinct()
        ->condition('c.namecity', db_like($str) . '%', 'LIKE')
        ->orderBy('c.namecity');
    if (isset($_SESSION['lablaw'][$depends])) {
        $thisfilt = $_SESSION['lablaw'][$depends];
        $query->condition('c.stateid', $thisfilt);
    }

    $return = $query->execute();
    foreach ($return as $obj) {
        $key = $obj->namecity;
        $items[$key] = check_plain($obj->namecity);
    }
    // return for JS
    return $items;
}

function lablaw_zip($str = "", $depends = NULL)
{
    $str = trim(preg_replace("/[^0-9a-zA-Z ]/", "", $str));
    $str = "";
    $items = array();
    $query = db_select('citydata', 'c');
    $query->fields('c', array('cityid', 'zipcode', 'namecity'))
        ->condition('c.zipcode', db_like($str) . '%', 'LIKE')
        ->range(0, 20)
        ->orderBy('c.zipcode');
    if (isset($_SESSION['lablaw']['edit-submitted-state'])) {
        $statefilt = $_SESSION['lablaw']['edit-submitted-state'];
        $query->condition('c.stateid', $statefilt);
    }

    $cnt = $query->countQuery()->execute()->fetchField();
    $query = db_select('citydata', 'c');
    $query->fields('c', array('cityid', 'zipcode', 'namecity'))
        ->range(0, 20)
        ->groupBy('c.zipcode')
        ->orderBy('c.zipcode');
    if (isset($_SESSION['lablaw'][$depends])) {
        $thiscity = $_SESSION['lablaw'][$depends];
        $query->condition('c.namecity', $thiscity);
    }
    if (isset($_SESSION['lablaw']['edit-submitted-state'])) {
        $statefilt = $_SESSION['lablaw']['edit-submitted-state'];
        $query->condition('c.stateid', $statefilt);
    }
    if ($cnt == "0") {
    } else {
        $query->condition('c.zipcode', db_like($str) . '%', 'LIKE');
    }


    $return = $query->execute();

    foreach ($return as $obj) {
        $key = $obj->zipcode;
        $items[$key] = check_plain($obj->zipcode);
    }
    return $items;
}

function lablaw_pov($num = 0, $amt = 0, $period = 12)
{
    $vals = variable_get_value("triage_pov_guides", array());
    $pov = $vals[$num] / $period;
    $ret = floor(($amt * 100) / $pov);
    return $ret;
}
